// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/tlscert/backend/api/v1alpha1"
	apiv1alpha1 "github.com/tlscert/backend/pkg/generated/applyconfiguration/api/v1alpha1"
	typedapiv1alpha1 "github.com/tlscert/backend/pkg/generated/clientset/versioned/typed/api/v1alpha1"
	gentype "k8s.io/client-go/gentype"
)

// fakeCertificatePools implements CertificatePoolInterface
type fakeCertificatePools struct {
	*gentype.FakeClientWithListAndApply[*v1alpha1.CertificatePool, *v1alpha1.CertificatePoolList, *apiv1alpha1.CertificatePoolApplyConfiguration]
	Fake *FakeApiV1alpha1
}

func newFakeCertificatePools(fake *FakeApiV1alpha1, namespace string) typedapiv1alpha1.CertificatePoolInterface {
	return &fakeCertificatePools{
		gentype.NewFakeClientWithListAndApply[*v1alpha1.CertificatePool, *v1alpha1.CertificatePoolList, *apiv1alpha1.CertificatePoolApplyConfiguration](
			fake.Fake,
			namespace,
			v1alpha1.SchemeGroupVersion.WithResource("certificatepools"),
			v1alpha1.SchemeGroupVersion.WithKind("CertificatePool"),
			func() *v1alpha1.CertificatePool { return &v1alpha1.CertificatePool{} },
			func() *v1alpha1.CertificatePoolList { return &v1alpha1.CertificatePoolList{} },
			func(dst, src *v1alpha1.CertificatePoolList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha1.CertificatePoolList) []*v1alpha1.CertificatePool {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1alpha1.CertificatePoolList, items []*v1alpha1.CertificatePool) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
