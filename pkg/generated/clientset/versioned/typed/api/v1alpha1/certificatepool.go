// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"

	apiv1alpha1 "github.com/tlscert/backend/api/v1alpha1"
	applyconfigurationapiv1alpha1 "github.com/tlscert/backend/pkg/generated/applyconfiguration/api/v1alpha1"
	scheme "github.com/tlscert/backend/pkg/generated/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// CertificatePoolsGetter has a method to return a CertificatePoolInterface.
// A group's client should implement this interface.
type CertificatePoolsGetter interface {
	CertificatePools(namespace string) CertificatePoolInterface
}

// CertificatePoolInterface has methods to work with CertificatePool resources.
type CertificatePoolInterface interface {
	Create(ctx context.Context, certificatePool *apiv1alpha1.CertificatePool, opts v1.CreateOptions) (*apiv1alpha1.CertificatePool, error)
	Update(ctx context.Context, certificatePool *apiv1alpha1.CertificatePool, opts v1.UpdateOptions) (*apiv1alpha1.CertificatePool, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, certificatePool *apiv1alpha1.CertificatePool, opts v1.UpdateOptions) (*apiv1alpha1.CertificatePool, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*apiv1alpha1.CertificatePool, error)
	List(ctx context.Context, opts v1.ListOptions) (*apiv1alpha1.CertificatePoolList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *apiv1alpha1.CertificatePool, err error)
	Apply(ctx context.Context, certificatePool *applyconfigurationapiv1alpha1.CertificatePoolApplyConfiguration, opts v1.ApplyOptions) (result *apiv1alpha1.CertificatePool, err error)
	// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
	ApplyStatus(ctx context.Context, certificatePool *applyconfigurationapiv1alpha1.CertificatePoolApplyConfiguration, opts v1.ApplyOptions) (result *apiv1alpha1.CertificatePool, err error)
	CertificatePoolExpansion
}

// certificatePools implements CertificatePoolInterface
type certificatePools struct {
	*gentype.ClientWithListAndApply[*apiv1alpha1.CertificatePool, *apiv1alpha1.CertificatePoolList, *applyconfigurationapiv1alpha1.CertificatePoolApplyConfiguration]
}

// newCertificatePools returns a CertificatePools
func newCertificatePools(c *ApiV1alpha1Client, namespace string) *certificatePools {
	return &certificatePools{
		gentype.NewClientWithListAndApply[*apiv1alpha1.CertificatePool, *apiv1alpha1.CertificatePoolList, *applyconfigurationapiv1alpha1.CertificatePoolApplyConfiguration](
			"certificatepools",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *apiv1alpha1.CertificatePool { return &apiv1alpha1.CertificatePool{} },
			func() *apiv1alpha1.CertificatePoolList { return &apiv1alpha1.CertificatePoolList{} },
		),
	}
}
